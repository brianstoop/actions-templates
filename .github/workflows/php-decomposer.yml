name: PHP Tests
on:
  workflow_call:
    inputs:
      phpstan-level:
        required: true
        type: string
        default: 4
      codestyle:
        required: true
        type: string
        default: Stellr
      codestyle-branch:
        required: true
        type: string
        default: stellr
      minimum-php-version:
        required: false
        type: string
        default: '8.1'
      stable-php-versions:
        required: true
        type: string
        default: '["8.1"]'
      experimental-php-versions:
        required: false
        type: string
        default: '["8.2", "8.3"]'
      minimum-phpunit-version:
        required: false
        type: string
        default: '9.5.x'
      allow-style-failures:
        required: false
        type: boolean
        default: false
      allow-phpstan-failures:
        required: false
        type: boolean
        default: false
      phpcs-whitelist:
        required: false
        type: string
        default: ''
      php-extensions:
        required: false
        type: string
        default: 'autoload_psr-pprkut/autoload-psr@0.2.0'
    secrets:
      SSH_PRIVATE_KEY_FOR_CLONING_NONPUBLIC_BACKEND_GIT_REPOSITORIES:
        required: true

jobs:
  generate-matrix:
    name: Generate matrix for phpunit
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix for build
        id: set-matrix
        run: |
          JSON=$(jq --null-input --arg stable '${{ inputs.stable-php-versions }}' --arg experimental '${{ inputs.experimental-php-versions }}' '{"php-versions": $stable | fromjson, "experimental": [ false ], "include":[ $experimental | fromjson | .[] as $version | {"php-versions": $version, "experimental": true} ]} | tostring')
          echo "matrix=$JSON" >> $GITHUB_OUTPUT

  phpunit:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    name: "PHP-${{ matrix.php-versions }}: PHPUnit"
    needs: generate-matrix
    strategy:
      matrix: ${{ fromJson(fromJson(needs.generate-matrix.outputs.matrix)) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Decomposer checkout
        uses: actions/checkout@v3
        with:
            repository: 'move-backend/decomposer'

            # Relative path under $GITHUB_WORKSPACE to place the repository
            path: 'decomposer'

      - name: Prepare decomposer target directory
        run: mkdir -p $GITHUB_WORKSPACE/vendor

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpunit:${{ inputs.minimum-phpunit-version }}
          extensions: ${{ inputs.php-extensions }}
          ini-values: include_path='.:/usr/share/php:$GITHUB_WORKSPACE/vendor'

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Configure ssh keys
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_FOR_CLONING_NONPUBLIC_BACKEND_GIT_REPOSITORIES }}

      - name: Install dependencies
        run: DECOMPOSER_TARGET_DIR="$GITHUB_WORKSPACE/vendor" decomposer/bin/decomposer install

      - name: Run PHPunit
        run: php -d xdebug.mode=off usr/local/bin/phpunit --configuration tests/phpunit.xml

  phpcs:
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow-style-failures }}
    name: "PHPCS"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Codestyle checkout
        uses: actions/checkout@v3
        with:
            repository: 'lunr-php/lunr-coding-standard'
            ref: ${{ inputs.codestyle-branch }}

            # Relative path under $GITHUB_WORKSPACE to place the repository
            path: 'codestyle'

      - name: Setup PHPCS
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.minimum-php-version }}
          tools: cs2pr, phpcs

      - name: Run PHPCS
        run: |
          phpcs -q --report=checkstyle \
                   --standard=$GITHUB_WORKSPACE/codestyle/${{ inputs.codestyle }} \
                   --ignore=locate\.* \
                   ${{ inputs.phpcs-whitelist }} \
                   src/ | cs2pr

  phpstan:
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow-phpstan-failures }}
    name: "PHPStan"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Decomposer checkout
        uses: actions/checkout@v3
        with:
            repository: 'move-backend/decomposer'

            # Relative path under $GITHUB_WORKSPACE to place the repository
            path: 'decomposer'

      - name: Prepare decomposer target directory
        run: mkdir -p $GITHUB_WORKSPACE/vendor

      - name: Setup PHPStan
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.minimum-php-version }}
          tools: phpstan
          extensions: autoload_psr-pprkut/autoload-psr@0.2.0
          ini-values: include_path='.:/usr/share/php:$GITHUB_WORKSPACE/vendor'

      - name: Configure ssh keys
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_FOR_CLONING_NONPUBLIC_BACKEND_GIT_REPOSITORIES }}

      - name: Install dependencies
        run: DECOMPOSER_TARGET_DIR="$GITHUB_WORKSPACE/vendor" decomposer/bin/decomposer install

      - name: Run PHPStan
        run: php -d xdebug.mode=off usr/local/bin/phpstan analyze src --level ${{ inputs.phpstan-level }} --configuration tests/phpstan.neon.dist --autoload-file tests/phpstan.autoload.inc.php