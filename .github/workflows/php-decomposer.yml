name: PHP Tests
on:
  workflow_call:
    inputs:
      phpstan-level:
        required: false
        type: string
        default: 4
      codestyle:
        required: false
        type: string
        default: Stellr
      codestyle-repo:
        required: false
        type: string
        default: 'move-backend/stellr-coding-standard'
      codestyle-branch:
        required: false
        type: string
        default: stellr
      minimum-php-version:
        required: false
        type: string
        default: '8.1'
      stable-php-versions:
        required: false
        type: string
        default: '["8.1"]'
      experimental-php-versions:
        required: false
        type: string
        default: '["8.2", "8.3"]'
      minimum-phpunit-version:
        required: false
        type: string
        default: '9.5.2x'
      allow-style-failures:
        required: false
        type: boolean
        default: false
      allow-phpstan-failures:
        required: false
        type: boolean
        default: false
      allow-sonarqube-failures:
        required: false
        type: boolean
        default: false
      phpcs-whitelist:
        required: false
        type: string
        default: ''
      sonar-host-url:
        required: false
        type: string
        default: 'https://whale.moveagency.com'
      php-extensions:
        required: false
        type: string
        default: 'autoload_psr-pprkut/autoload-psr@0.2.0'
    secrets:
      SSH_PRIVATE_KEY_FOR_CLONING_NONPUBLIC_BACKEND_GIT_REPOSITORIES:
        required: true
      SONAR_TOKEN:
        required: false
      SLACK_WEBHOOK_URL:
        required: false

env:
  SLACK_SEND_EVENTS: '["push", "schedule"]'

jobs:
  generate-matrix:
    name: Generate matrix for phpunit
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    permissions:
      contents: none
    steps:
      - name: Set matrix for build
        id: set-matrix
        env:
          STABLE_VERSIONS: ${{ inputs.stable-php-versions }}
          EXPERIMENTAL_VERSIONS: ${{ inputs.experimental-php-versions }}
        run: |
          JSON=$(jq --null-input --arg stable "$STABLE_VERSIONS" --arg experimental "$EXPERIMENTAL_VERSIONS" '{"php-versions": $stable | fromjson, "experimental": [ false ], "include":[ $experimental | fromjson | .[] as $version | {"php-versions": $version, "experimental": true} ]} | tostring')
          echo "matrix=$JSON" >> "$GITHUB_OUTPUT"

  phpunit:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    name: "PHP-${{ matrix.php-versions }}: PHPUnit"
    needs: generate-matrix
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    strategy:
      matrix: ${{ fromJson(fromJson(needs.generate-matrix.outputs.matrix)) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: true

      - name: Cache decomposer dependencies
        id: cache-decomposer
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: | 
            ${{ github.workspace }}/vendor
            ${{ github.workspace }}/decomposer.autoload.inc.php
          key: ${{ runner.os }}-${{ hashFiles('decomposer.json') }}
          restore-keys: 
            ${{ runner.os }}-

      - name: Decomposer checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            repository: 'move-backend/decomposer'

            # Relative path under $GITHUB_WORKSPACE to place the repository
            path: 'decomposer'
            persist-credentials: false

      - if: ${{ steps.cache-decomposer.outputs.cache-hit != 'true' }}
        name: Prepare decomposer target directory
        run: mkdir -p "$GITHUB_WORKSPACE/vendor"

      - name: Setup PHP
        uses: shivammathur/setup-php@ec406be512d7077f68eed36e63f4d91bc006edc4 # v2.35.4
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpunit:${{ inputs.minimum-phpunit-version }}
          extensions: ${{ inputs.php-extensions }}
          ini-values: include_path='.:/usr/share/php:$GITHUB_WORKSPACE/vendor'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Configure ssh keys
        uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_FOR_CLONING_NONPUBLIC_BACKEND_GIT_REPOSITORIES }}

      - name: Install dependencies
        run: DECOMPOSER_TARGET_DIR="$GITHUB_WORKSPACE/vendor" decomposer/bin/decomposer install

      - name: Run PHPunit
        run: phpunit --configuration tests/phpunit.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6 # v2.20.0
        with:
          check_run: false
          files: |
              build/logs/junit.xml

      - name: Upload results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: phpunit-logs-${{ matrix.php-versions }}
          path: build/logs/

      - name: Post a message in a channel
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() && contains(fromJSON(env.SLACK_SEND_EVENTS), github.event_name) && env.SLACK_WEBHOOK_URL != '' }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*${{ github.repository }} (${{ github.ref_name }})*: PHP-${{ matrix.php-versions }}: PHPUnit ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*${{ github.repository }} (${{ github.ref_name }})*: PHP-${{ matrix.php-versions }}: PHPUnit ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  phpcs:
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow-style-failures }}
    name: "PHPCS"
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: true

      - name: Codestyle checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            repository: ${{ inputs.codestyle-repo }}
            ref: ${{ inputs.codestyle-branch }}

            # Clone submodules recursively. `true` should be enough, but better be safe
            submodules: 'recursive'

            # Relative path under $GITHUB_WORKSPACE to place the repository
            path: 'codestyle'
            persist-credentials: false

      - name: Install dependencies
        if: ${{ hashFiles('codestyle/composer.json') != '' }}
        working-directory: 'codestyle'
        run: composer install

      - name: Setup PHPCS
        uses: shivammathur/setup-php@ec406be512d7077f68eed36e63f4d91bc006edc4 # v2.35.4
        with:
          php-version: ${{ inputs.minimum-php-version }}
          tools: cs2pr, phpcs:3.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run PHPCS
        run: |
          BOOTSTRAP=$([ -e "$GITHUB_WORKSPACE/codestyle/bootstrap.php" ] && echo "--bootstrap=$GITHUB_WORKSPACE/codestyle/bootstrap.php" || echo '')
          export BOOTSTRAP
          SLEVOMAT=$([ -d "$GITHUB_WORKSPACE/codestyle/third-party/slevomat/" ] && echo "--runtime-set installed_paths $GITHUB_WORKSPACE/codestyle/third-party/slevomat/" || echo '')
          export SLEVOMAT

          # Disabling quote requirements because we need the code injection
          # shellcheck disable=SC2086
          phpcs --report-full \
                --report-checkstyle=checkstyle.xml \
                $SLEVOMAT \
                $BOOTSTRAP \
                --standard="$GITHUB_WORKSPACE/codestyle/${CODESTYLE}" \
                --ignore=locate\.* \
                ${PHPCS_WHITELIST} \
                src/
        env:
          CODESTYLE: ${{ inputs.codestyle }}
          PHPCS_WHITELIST: ${{ inputs.phpcs-whitelist }}

      - name: Convert checkstyle output to github style
        if: always()
        run: cs2pr ./checkstyle.xml

      - name: Post a message in a channel
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() && contains(fromJSON(env.SLACK_SEND_EVENTS), github.event_name) && env.SLACK_WEBHOOK_URL != '' }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*${{ github.repository }} (${{ github.ref_name }})*: PHPCS ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*${{ github.repository }} (${{ github.ref_name }})*: PHPCS ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  phpstan:
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow-phpstan-failures }}
    name: "PHPStan"
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: true

      - name: Cache decomposer dependencies
        id: cache-decomposer
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: | 
            ${{ github.workspace }}/vendor
            ${{ github.workspace }}/decomposer.autoload.inc.php
          key: ${{ runner.os }}-${{ hashFiles('decomposer.json') }}
          restore-keys: 
            ${{ runner.os }}-

      - name: Decomposer checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
            repository: 'move-backend/decomposer'

            # Relative path under $GITHUB_WORKSPACE to place the repository
            path: 'decomposer'
            persist-credentials: false

      - if: ${{ steps.cache-decomposer.outputs.cache-hit != 'true' }}
        name: Prepare decomposer target directory
        run: mkdir -p "$GITHUB_WORKSPACE/vendor"

      - name: Setup PHPStan
        uses: shivammathur/setup-php@ec406be512d7077f68eed36e63f4d91bc006edc4 # v2.35.4
        with:
          php-version: ${{ inputs.minimum-php-version }}
          tools: phpstan:2.1.8
          extensions: autoload_psr-pprkut/autoload-psr@0.2.0
          ini-values: include_path='.:/usr/share/php:$GITHUB_WORKSPACE/vendor'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure ssh keys
        uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY_FOR_CLONING_NONPUBLIC_BACKEND_GIT_REPOSITORIES }}

      - name: Install dependencies
        run: DECOMPOSER_TARGET_DIR="$GITHUB_WORKSPACE/vendor" decomposer/bin/decomposer install

      - name: Run PHPStan
        env:
          PHPSTAN_LEVEL: ${{ inputs.phpstan-level }}
        run: phpstan analyze src --level "$PHPSTAN_LEVEL" --configuration tests/phpstan.neon.dist --autoload-file tests/phpstan.autoload.inc.php

      - name: Post a message in a channel
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() && contains(fromJSON(env.SLACK_SEND_EVENTS), github.event_name) && env.SLACK_WEBHOOK_URL != '' }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*${{ github.repository }} (${{ github.ref_name }})*: PHPStan ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*${{ github.repository }} (${{ github.ref_name }})*: PHPStan ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  sonarqube:
    runs-on: ubuntu-latest
    continue-on-error: ${{ inputs.allow-sonarqube-failures }}
    name: "SonarQube"
    needs: [phpunit]
    permissions:
      contents: read
    steps:
      - name: Determine variables
        id: variables
        run: |
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.repository	}}"
          ACCOUNT_SLUG=${OWNER/move-/}
          ACCOUNT_SLUG=${ACCOUNT_SLUG/framna-nl-/}
          ACCOUNT_SLUG=${ACCOUNT_SLUG/framna-/}
          echo "account=${ACCOUNT_SLUG^^}" >> "$GITHUB_OUTPUT"
          echo "project=${REPO/$OWNER\//}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Download logs
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: phpunit-logs-${{ inputs.minimum-php-version }}
          path: ${{ github.workspace }}/build/logs

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1
        env:
          SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ env.SONAR_TOKEN != '' }}
        with:
          args: >
            -Dsonar.projectKey=${{ steps.variables.outputs.account }}:backend:${{ steps.variables.outputs.project }}
            -Dsonar.projectName=${{ steps.variables.outputs.project }}
            -Dsonar.php.tests.reportPath=build/logs/junit.xml
            -Dsonar.php.coverage.reportPaths=build/logs/clover.xml
            -Dsonar.plugins.downloadOnlyRequired=true
            -Dsonar.verbose=true

      - name: Post a message in a channel
        uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a # v2.1.1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: ${{ failure() && contains(fromJSON(env.SLACK_SEND_EVENTS), github.event_name) && env.SLACK_WEBHOOK_URL != '' }}
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*${{ github.repository }} (${{ github.ref_name }})*: SonarQube ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*${{ github.repository }} (${{ github.ref_name }})*: SonarQube ${{ job.status }}\nURL: ${{ github.event.pull_request.html_url || format('https://github.com/{0}/commit/{1}', github.repository, github.sha) }}\nWorkflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
